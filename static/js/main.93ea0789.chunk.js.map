{"version":3,"sources":["components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","time","seconds","minutes","hours","timeCountDown","markMode","chronometreIsRunning","CountdownIsRunning","getHours","getMinutes","getSeconds","getTime","startChronometre","s","m","h","timer","setInterval","setState","startCountdown","stopTimer","clearInterval","resetTimer","changeMode","changeTitle","this","className","onClick","startTimer","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93ea0789.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    time: {\r\n      seconds: 0,\r\n      minutes: 0,\r\n      hours: 0,\r\n    },\r\n    timeCountDown: {\r\n      seconds: 0,\r\n      minutes: 5,\r\n      hours: 0,\r\n    },\r\n    markMode: false, //chronometre\r\n    chronometreIsRunning: false,\r\n    CountdownIsRunning: false,\r\n  };\r\n  getHours = (markMode) => {\r\n    return markMode ? this.state.timeCountDown.hours : this.state.time.hours;\r\n  };\r\n  getMinutes = (markMode) => {\r\n    return markMode\r\n      ? this.state.timeCountDown.minutes\r\n      : this.state.time.minutes;\r\n  };\r\n  getSeconds = (markMode) => {\r\n    return markMode\r\n      ? this.state.timeCountDown.seconds\r\n      : this.state.time.seconds;\r\n  };\r\n  getTime = (time) => {\r\n    return time < 10 ? `0${time}` : time;\r\n  };\r\n  startChronometre = (s, m, h) => {\r\n    if (!this.state.chronometreIsRunning) {\r\n      this.timer = setInterval(() => {\r\n        if (s === 59) {\r\n          s = 0;\r\n          if (m === 59) {\r\n            m = 0;\r\n            h = h + 1;\r\n          } else {\r\n            m = m + 1;\r\n          }\r\n        } else {\r\n          s = s + 1;\r\n        }\r\n        this.setState({\r\n          time: {\r\n            seconds: s,\r\n            minutes: m,\r\n            hours: h,\r\n          },\r\n        });\r\n      }, 1000);\r\n    } else {\r\n      return;\r\n    }\r\n    this.setState({\r\n      chronometreIsRunning: true,\r\n    });\r\n  };\r\n  startCountdown = (s, m, h, markMode) => {\r\n    if (!this.state.CountdownIsRunning) {\r\n      this.timer = setInterval(() => {\r\n        if (s === 0) {\r\n          s = 59;\r\n          if (m === 0) {\r\n            m = 59;\r\n            h = h - 1;\r\n          } else {\r\n            m = m - 1;\r\n          }\r\n        } else {\r\n          s = s - 1;\r\n        }\r\n        this.setState({\r\n          timeCountDown: {\r\n            seconds: s,\r\n            minutes: m,\r\n            hours: h,\r\n          },\r\n        });\r\n      }, 1000);\r\n    } else {\r\n      return;\r\n    }\r\n    this.setState({\r\n      CountdownIsRunning: true,\r\n    });\r\n  };\r\n  startTimer(s, m, h, markMode) {\r\n    return markMode\r\n      ? this.startCountdown(s, m, h)\r\n      : this.startChronometre(s, m, h, markMode);\r\n  }\r\n  stopTimer = () => {\r\n    clearInterval(this.timer);\r\n  };\r\n  resetTimer = (markMode) => {\r\n    this.stopTimer();\r\n    if (markMode) {\r\n      this.setState({\r\n        timeCountDown: {\r\n          seconds: 0,\r\n          minutes: 5,\r\n          hours: 0,\r\n        },\r\n        CountdownIsRunning : false,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        time: {\r\n          seconds: 0,\r\n          minutes: 0,\r\n          hours: 0,\r\n        },\r\n        chronometreIsRunning: false,\r\n      });\r\n    }\r\n  };\r\n  changeMode = () => {\r\n    this.setState({\r\n      markMode: !this.state.markMode,\r\n    });\r\n  };\r\n  changeTitle = (markMode) => {\r\n    return markMode ? \"Chronometer\" : \"Countdown\";\r\n  };\r\n\r\n  render() {\r\n    const { markMode } = this.state;\r\n\r\n    return (\r\n      <div className=\"timer\">\r\n        <div className=\"time\">\r\n          <span>{this.getTime(this.getHours(markMode))}</span> :{\" \"}\r\n          <span>{this.getTime(this.getMinutes(markMode))}</span> :{\" \"}\r\n          <span>{this.getTime(this.getSeconds(markMode))}</span>\r\n        </div>\r\n        <div>\r\n          <button\r\n            className=\"btn-time\"\r\n            onClick={() =>\r\n              this.startTimer(\r\n                this.getSeconds(markMode),\r\n                this.getMinutes(markMode),\r\n                this.getHours(markMode),\r\n                markMode\r\n              )\r\n            }\r\n          >\r\n            Start\r\n          </button>\r\n          <button className=\"btn-time\" onClick={() => this.stopTimer()}>\r\n            Stop\r\n          </button>\r\n          <button\r\n            className=\"btn-time\"\r\n            onClick={() => this.resetTimer(markMode)}\r\n          >\r\n            reset\r\n          </button>\r\n        </div>\r\n        <button className=\"btn-mode\" onClick={() => this.changeMode()}>\r\n          {this.changeTitle(markMode)}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport Timer from './components/Timer'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TIMER</h1>\n        <Timer />\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}